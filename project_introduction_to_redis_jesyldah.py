# -*- coding: utf-8 -*-
"""Project_Introduction to Redis-Jesyldah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GJ0_GYHaFFh9l6pbq0bRaRLCyjBYK9lQ
"""

# Install redis-py

!pip install redis

# Connect to Redis

import redis

r = redis.StrictRedis(
    host='redis-12506.c257.us-east-1-3.ec2.cloud.redislabs.com',
    port=12506,
    password='FBgJkcDebgVcuj4KJXTUCMmyyglLMbup',
    db=0,
    decode_responses=True
)

# Upload dummy csv file

from google.colab import files
files.upload()

# Updload data from csv to remote redis database

import csv

f = csv.reader(open("dummy.csv",encoding='ISO 8859-1'))
header = next(f)

r = redis.Redis(
    host='redis-12506.c257.us-east-1-3.ec2.cloud.redislabs.com',
    port=12506, 
    password='FBgJkcDebgVcuj4KJXTUCMmyyglLMbup',
    db=0,
    decode_responses=True)

doclist= []

for row in f:
  doc = dict(zip(header, row))
  doclist.append(doc)

import json

key = "dummy"

r.set(key, json.dumps(doclist))
data = json.loads(r.get(key))
print(data)

# Retrieve and save in pandas

import pandas as pd

myoutput = pd.DataFrame()

for item in data:
  myoutput = myoutput.append(item, ignore_index=True)

print(myoutput.shape)

# upload dummy csv file with updates

from google.colab import files
files.upload()

# Updload updated data from csv to remote redis database

import csv

f = csv.reader(open("dummy_update.csv",encoding='ISO 8859-1'))
header = next(f)

r = redis.Redis(
    host='redis-12506.c257.us-east-1-3.ec2.cloud.redislabs.com',
    port=12506, 
    password='FBgJkcDebgVcuj4KJXTUCMmyyglLMbup',
    db=0,
    decode_responses=True)

doclist_update= []

for row in f:
  doc = dict(zip(header, row))
  doclist_update.append(doc)

import json

key = "dummy"

updated_list = doclist_update + doclist

r.set(key, json.dumps(updated_list))

# Retrieve and save in pandas

data = json.loads(r.get(key))
print(data)

import pandas as pd

output = pd.DataFrame()

for item in data:
  output = output.append(item, ignore_index=True)

output.shape

# Delete data on database

r.flushdb()

# Confirm deletion
print(r.keys())